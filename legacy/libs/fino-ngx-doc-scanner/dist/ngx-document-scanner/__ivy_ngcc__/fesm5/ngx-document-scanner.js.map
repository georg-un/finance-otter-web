{"version":3,"file":"ngx-document-scanner.js","sources":["ng:/ngx-document-scanner/lib/services/limits.service.ts","ng:/ngx-document-scanner/lib/components/draggable-point/ngx-draggable-point.component.ts","ng:/ngx-document-scanner/lib/components/filter-menu/ngx-filter-menu.component.ts","ng:/ngx-document-scanner/lib/components/shape-outline/ngx-shape-outline.component.ts","ng:/ngx-document-scanner/lib/components/image-editor/ngx-doc-scanner.component.ts","ng:/ngx-document-scanner/lib/ngx-document-scanner.module.ts","ng:/ngx-document-scanner/lib/PublicModels.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {ImageDimensions} from '../PublicModels';\nimport {LimitException, XYPosition} from '../PrivateModels';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LimitsService {\n\n\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\n  /**\n   * stores the crop limits limits\n   */\n  private _limits = {\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0\n  };\n  /**\n   * stores the array of the draggable points displayed on the crop area\n   */\n  private _points: Array<PointPositionChange> = [];\n  /**\n   * stores the pane dimensions\n   */\n  private _paneDimensions: ImageDimensions;\n\n  // *********** //\n  // Observables //\n  // *********** //\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\n\n  constructor() {\n  }\n\n  /**\n   * set privew pane dimensions\n   */\n  public setPaneDimensions(dimensions: ImageDimensions) {\n    return new Promise((resolve, reject) => {\n      this._paneDimensions = dimensions;\n      this.paneDimensions.next(dimensions);\n      resolve();\n    });\n  }\n\n  /**\n   * repositions points externally\n   */\n  public repositionPoints(positions) {\n    this._points = positions;\n    positions.forEach(position => {\n      this.positionChange(position);\n    });\n    this.repositionEvent.next(positions);\n  }\n\n  /**\n   * updates limits and point positions and calls next on the observables\n   * @param positionChangeData - position change event data\n   */\n  public positionChange(positionChangeData: PointPositionChange) {\n    // update positions according to current position change\n    this.updatePosition(positionChangeData);\n\n    // for each direction:\n    // 1. filter the _points that have a role as the direction's limit\n    // 2. for top and left find max x | y values, and min for right and bottom\n    this.limitDirections.forEach(direction => {\n      const relevantPoints = this._points.filter(point => {\n        return point.roles.includes(direction);\n      })\n        .map((point: PointPositionChange) => {\n          return point[this.getDirectionAxis(direction)];\n        });\n      let limit;\n      if (direction === 'top' || direction === 'left') {\n        limit = Math.max(...relevantPoints);\n      }\n      if (direction === 'right' || direction === 'bottom') {\n        limit = Math.min(...relevantPoints);\n      }\n      this._limits[direction] = limit;\n    });\n\n    this.limits.next(this._limits);\n    this.positions.next(Array.from(this._points));\n  }\n\n  /**\n   * updates the position of the point\n   * @param positionChange - position change event data\n   */\n  public updatePosition(positionChange: PointPositionChange) {\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\n    const index = this._points.findIndex(point => {\n      return this.compareArray(positionChange.roles, point.roles);\n    });\n    if (index === -1) {\n      this._points.push(positionChange);\n    } else {\n      this._points.splice(index, 1, positionChange);\n    }\n  }\n\n  /**\n   * check if a position change event exceeds the limits\n   * @param positionChange - position change event data\n   * @returns LimitException0\n   */\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\n    const pointLimits = this.limitDirections.filter(direction => {\n      return !positionChange.roles.includes(direction);\n    });\n\n    const limitException: LimitException = {\n      exceeds: false,\n      resetCoefficients: {\n        x: 0,\n        y: 0\n      },\n      resetCoordinates: {\n        x: positionChange.x,\n        y: positionChange.y\n      }\n    };\n\n    // limit directions are the opposite sides of the point's roles\n    pointLimits.forEach(direction => {\n      const directionAxis = this.getDirectionAxis(direction);\n      if (direction === 'top' || direction === 'left') {\n        if (positionChange[directionAxis] < this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = 1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      } else if (direction === 'right' || direction === 'bottom') {\n        if (positionChange[directionAxis] > this._limits[direction]) {\n          limitException.resetCoefficients[directionAxis] = -1;\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\n        }\n      }\n    });\n\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\n      limitException.exceeds = true;\n    }\n\n    return limitException;\n  }\n\n  /**\n   * rotate crop tool points clockwise\n   * @param resizeRatios - ratio between the new dimensions and the previous\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\n   * @param initialPositions - current positions before rotation\n   */\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\n    // convert positions to ratio between position to initial pane dimension\n    initialPositions = initialPositions.map(point => {\n      return new PositionChangeData({\n        x: point.x / initialPreviewDimensions.width,\n        y: point.y / initialPreviewDimensions.height,\n      }, point.roles);\n    });\n    this.repositionPoints(initialPositions.map(point => {\n      return this.rotateCornerClockwise(point);\n    }));\n  }\n\n  /**\n   * returns the corner positions after a 90 degrees clockwise rotation\n   */\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\n    const rotated: PointPositionChange = {\n      x: this._paneDimensions.width * (1 - corner.y),\n      y: this._paneDimensions.height * corner.x,\n      roles: []\n    };\n    // rotates corner according to order\n    const order: Array<RolesArray> = [\n      ['bottom', 'left'],\n      ['top', 'left'],\n      ['top', 'right'],\n      ['bottom', 'right'],\n      ['bottom', 'left']\n    ];\n    rotated.roles = order[order.findIndex(roles => {\n      return this.compareArray(roles, corner.roles);\n    }) + 1];\n    return rotated;\n  }\n\n  /**\n   * checks if two array contain the same values\n   * @param array1 - array 1\n   * @param array2 - array 2\n   * @returns boolean\n   */\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\n    return array1.every((element) => {\n      return array2.includes(element);\n    }) && array1.length === array2.length;\n  }\n\n  private getDirectionAxis(direction) {\n    return {\n      left: 'x',\n      right: 'x',\n      top: 'y',\n      bottom: 'y'\n    }[direction];\n  }\n}\n\n\nexport interface PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n}\n\nexport interface AreaLimits {\n  top: number;\n  bottom: number;\n  right: number;\n  left: number;\n}\n\nexport type RolesArray = Array<Direction>;\n\nexport class PositionChangeData implements PointPositionChange {\n  x: number;\n  y: number;\n  roles: RolesArray;\n\n  constructor(position: XYPosition, roles: RolesArray) {\n    this.x = position.x;\n    this.y = position.y;\n    this.roles = roles;\n  }\n}\n\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\n","import {AfterViewInit, Component, Input} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\nimport {LimitException, XYPosition} from '../../PrivateModels';\n\n@Component({\n  selector: 'ngx-draggable-point',\n  templateUrl: './ngx-draggable-point.component.html',\n})\nexport class NgxDraggablePointComponent implements AfterViewInit {\n  @Input() width = 10;\n  @Input() height = 10;\n  @Input() color = '#3cabe2';\n  @Input() shape: 'rect' | 'circle' = 'rect';\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\n  @Input() limitRoles: Array<'left'|'right'|'top'|'bottom'>;\n  @Input() startPosition: XYPosition;\n  @Input() container: HTMLElement;\n  @Input() private _currentPosition: XYPosition;\n  position: XYPosition = {\n    x: 0,\n    y: 0\n  };\n  private _paneDimensions: ImageDimensions;\n  resetPosition: XYPosition;\n\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    Object.keys(this.pointOptions).forEach(key => {\n      this[key] = this.pointOptions[key];\n    });\n    // subscribe to pane dimensions changes\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      if (dimensions.width > 0 && dimensions.width > 0) {\n        this._paneDimensions = {\n          width: dimensions.width,\n          height: dimensions.height\n        };\n        this.position = this.getInitialPosition(dimensions);\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n      }\n    });\n    // subscribe to external reposition events\n    this.limitsService.repositionEvent.subscribe(positions => {\n      if (positions.length > 0) {\n        this.externalReposition(positions);\n      }\n    });\n  }\n\n  /**\n   * returns a css style object for the point\n   */\n  pointStyle() {\n    return {\n      width: this.width + 'px',\n      height: this.height + 'px',\n      'background-color': this.color,\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\n      position: 'absolute'\n    };\n  }\n\n  /**\n   * registers a position change on the limits service, and adjusts position if necessary\n   * @param position - the current position of the point\n   */\n  positionChange(position: XYPosition) {\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      // if exceeds limits, reposition\n      this.resetPosition = limitException.resetCoordinates;\n    } else {\n      this.limitsService.positionChange(positionChangeData);\n      this._currentPosition = position;\n    }\n  }\n\n  /**\n   * adjusts the position of the point after a limit exception\n   */\n  private adjustPosition(limitException: LimitException) {\n    const newPosition = {\n      x: 0,\n      y: 0\n    };\n    Object.keys(this.startPosition).forEach(axis => {\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\n    });\n    this.position = newPosition;\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\n  }\n\n  /**\n   * called on movement end, checks if last position exceeded the limits ad adjusts\n   */\n  movementEnd(position: XYPosition) {\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\n    if (limitException.exceeds) {\n      this.resetPosition = limitException.resetCoordinates;\n      if (limitException.exceeds) {\n        this.adjustPosition(limitException);\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\n        this.limitsService.updatePosition(positionChangeData);\n      }\n    }\n  }\n\n  /**\n   * calculates the initial positions of the point by it's roles\n   * @param dimensions - dimensions of the pane in which the point is located\n   */\n  private getInitialPosition(dimensions: ImageDimensions) {\n    return {\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\n    };\n  }\n\n  /**\n   * repositions the point after an external reposition event\n   * @param positions - an array of all points on the pane\n   */\n  private externalReposition(positions: Array<PointPositionChange>) {\n    positions.forEach(position => {\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\n        position = this.enforcePaneLimits(position);\n        this.position = {\n          x: position.x,\n          y: position.y\n        };\n      }\n    });\n  }\n\n  /**\n   * returns a new point position if the movement exceeded the pane limit\n   */\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\n      return position;\n    } else {\n      if (position.x > this._paneDimensions.width) { position.x = this._paneDimensions.width; }\n      if (position.x < 0) { position.x = 1; }\n      if (position.y > this._paneDimensions.height) { position.y = this._paneDimensions.height; }\n      if (position.y < 0) { position.y = 1; }\n    }\n    return position;\n  }\n}\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\nimport {EditorActionButton} from '../../PrivateModels';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material/bottom-sheet';\n\n@Component({\n  selector: 'ngx-filter-menu',\n  templateUrl: './ngx-filter-menu.component.html',\n})\nexport class NgxFilterMenuComponent {\n  filterOptions: Array<EditorActionButton> = [\n    {\n      name: 'default',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W'\n    },\n    {\n      name: 'bw2',\n      icon: 'filter_b_and_w',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 2'\n    },\n    {\n      name: 'bw3',\n      icon: 'blur_on',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'B&W 3'\n    },\n    {\n      name: 'magic_color',\n      icon: 'filter_vintage',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Magic Color'\n    },\n    {\n      name: 'original',\n      icon: 'crop_original',\n      action: (filter) => {\n        this.filterSelected.emit(filter);\n      },\n      text: 'Original'\n    },\n  ];\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\n  selectOption(optionName) {\n    this.data.filter = optionName;\n    this.bottomSheetRef.dismiss();\n  }\n\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\n              ) {}\n\n}\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\nimport {ImageDimensions} from '../../PublicModels';\n\n@Component({\n  selector: 'ngx-shape-outine',\n  templateUrl: './ngx-shape-outline.component.html',\n})\nexport class NgxShapeOutlineComponent implements AfterViewInit {\n\n  @Input() color = '#3cabe2';\n  @Input() weight: number;\n  @Input() dimensions: ImageDimensions;\n  @ViewChild('outline', {static: false}) canvas;\n\n  private _points: Array<PointPositionChange>;\n  private _sortedPoints: Array<PointPositionChange>;\n  constructor(private limitsService: LimitsService) {}\n\n  ngAfterViewInit() {\n    // init drawing canvas dimensions\n    this.canvas.nativeElement.width = this.dimensions.width;\n    this.canvas.nativeElement.height = this.dimensions.height;\n    this.limitsService.positions.subscribe(positions => {\n      if (positions.length === 4) {\n        this._points = positions;\n        this.sortPoints();\n        this.clearCanvas();\n        this.drawShape();\n      }\n    });\n    // subscribe to changes in the pane's dimensions\n    this.limitsService.paneDimensions.subscribe(dimensions => {\n      this.clearCanvas();\n      this.canvas.nativeElement.width = dimensions.width;\n      this.canvas.nativeElement.height = dimensions.height;\n    });\n    // subscribe to reposition events\n    this.limitsService.repositionEvent.subscribe( positions => {\n      if (positions.length === 4) {\n        setTimeout( () => {\n          this.clearCanvas();\n          this.sortPoints();\n          this.drawShape();\n        }, 10);\n      }\n    });\n  }\n\n  /**\n   * clears the shape canvas\n   */\n  private clearCanvas() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  /**\n   * sorts the array of points according to their clockwise alignment\n   */\n  private sortPoints() {\n    const _points = Array.from(this._points);\n    const sortedPoints = [];\n\n    const sortOrder = {\n      vertical: ['top', 'top', 'bottom', 'bottom'],\n      horizontal: ['left', 'right', 'right', 'left']\n    };\n\n    for (let i = 0; i < 4; i++) {\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\n      sortedPoints.push(_points.filter((point) => {\n        return this.limitsService.compareArray(point.roles, roles);\n      })[0]);\n\n    }\n    this._sortedPoints = sortedPoints;\n  }\n\n  /**\n   * draws a line between the points according to their order\n   */\n  private drawShape() {\n    const canvas = this.canvas.nativeElement;\n    const ctx = canvas.getContext('2d');\n    ctx.lineWidth = this.weight;\n    ctx.strokeStyle = this.color;\n    ctx.beginPath();\n    this._sortedPoints.forEach((point, index) => {\n      if (index === 0) {\n        ctx.moveTo(point.x, point.y);\n      }\n      if (index !== this._sortedPoints.length - 1) {\n        const nextPoint = this._sortedPoints[index + 1];\n        ctx.lineTo(nextPoint.x, nextPoint.y);\n      } else {\n        ctx.closePath();\n      }\n    });\n    ctx.stroke();\n  }\n}\n\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\nimport {MatBottomSheet} from '@angular/material/bottom-sheet';\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\nimport {PointShape} from '../../PrivateModels';\n// import {NgxOpenCVService} from '../../services/ngx-opencv.service';\nimport {ImageDimensions, DocScannerConfig, OpenCVState} from '../../PublicModels';\nimport {EditorActionButton, PointOptions} from '../../PrivateModels';\nimport {NgxOpenCVService} from 'ngx-opencv';\n\ndeclare var cv: any;\n\n@Component({\n  selector: 'ngx-doc-scanner',\n  templateUrl: './ngx-doc-scanner.component.html',\n  styleUrls: ['./ngx-doc-scanner.component.scss']\n})\nexport class NgxDocScannerComponent implements OnInit {\n  /**\n   * editor config object\n   */\n  options: ImageEditorConfig;\n  // ************* //\n  // EDITOR CONFIG //\n  // ************* //\n  /**\n   * an array of action buttons displayed on the editor screen\n   */\n  private editorButtons: Array<EditorActionButton> = [\n    {\n      name: 'exit',\n      action: () => {\n        this.exitEditor.emit('canceled');\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'rotate',\n      action: this.rotateImage.bind(this),\n      icon: 'rotate_right',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'done_crop',\n      action: async () => {\n        this.mode = 'color';\n        await this.transform();\n        await this.applyFilter(true);\n      },\n      icon: 'done',\n      type: 'fab',\n      mode: 'crop'\n    },\n    {\n      name: 'back',\n      action: () => {\n        this.mode = 'crop';\n        this.loadFile(this.originalImage);\n      },\n      icon: 'arrow_back',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'filter',\n      action: () => {\n        return this.chooseFilters();\n      },\n      icon: 'photo_filter',\n      type: 'fab',\n      mode: 'color'\n    },\n    {\n      name: 'upload',\n      action: this.exportImage.bind(this),\n      icon: 'cloud_upload',\n      type: 'fab',\n      mode: 'color'\n    },\n  ];\n  /**\n   * returns an array of buttons according to the editor mode\n   */\n  get displayedButtons() {\n    return this.editorButtons.filter(button => {\n      return button.mode === this.mode;\n    });\n  }\n  /**\n   * max width of the preview area\n   */\n  private maxPreviewWidth: number;\n  /**\n   * dimensions of the image container\n   */\n  imageDivStyle: {[key: string]: string|number};\n  /**\n   * editor div style\n   */\n  editorStyle: {[key: string]: string|number};\n\n  // ************* //\n  // EDITOR STATE //\n  // ************* //\n  /**\n   * state of opencv loading\n   */\n  private cvState: string;\n  /**\n   * true after the image is loaded and preview is displayed\n   */\n  imageLoaded = false;\n  /**\n   * editor mode\n   */\n  mode: 'crop'|'color' = 'crop';\n  /**\n   * filter selected by the user, returned by the filter selector bottom sheet\n   */\n  private selectedFilter = 'default';\n\n  // ******************* //\n  // OPERATION VARIABLES //\n  // ******************* //\n  /**\n   * viewport dimensions\n   */\n  private screenDimensions: ImageDimensions;\n  /**\n   * image dimensions\n   */\n  private imageDimensions: ImageDimensions = {\n    width: 0,\n    height: 0\n  };\n  /**\n   * dimensions of the preview pane\n   */\n  previewDimensions: ImageDimensions;\n  /**\n   * ration between preview image and original\n   */\n  private imageResizeRatio: number;\n  /**\n   * stores the original image for reset purposes\n   */\n  private originalImage: File;\n  /**\n   * stores the edited image\n   */\n  private editedImage: HTMLCanvasElement;\n  /**\n   * stores the preview image as canvas\n   */\n  @ViewChild('PreviewCanvas', {static: false, read: ElementRef}) private previewCanvas: ElementRef;\n  /**\n   * an array of points used by the crop tool\n   */\n  private points: Array<PointPositionChange>;\n\n  // ************** //\n  // EVENT EMITTERS //\n  // ************** //\n  /**\n   * optional binding to the exit button of the editor\n   */\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * fires on edit completion\n   */\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\n  /**\n   * emits errors, can be linked to an error handler of choice\n   */\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  /**\n   * emits the loading status of the cv module.\n   */\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\n  /**\n   * emits true when processing is done, false when completed\n   */\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // ****** //\n  // INPUTS //\n  // ****** //\n  /**\n   * set image for editing\n   * @param file - file from form input\n   */\n  @Input() set file(file: File) {\n    if (file) {\n      setTimeout(() => {\n        this.processing.emit(true);\n      }, 5);\n      this.imageLoaded = false;\n      this.originalImage = file;\n      this.ngxOpenCv.cvState.subscribe(\n        async (cvState: OpenCVState) => {\n          if (cvState.ready) {\n            // read file to image & canvas\n            await this.loadFile(file);\n            this.processing.emit(false);\n          }\n        });\n    }\n  }\n\n  /**\n   * editor configuration object\n   */\n  @Input() config: DocScannerConfig;\n\n\n  constructor(private ngxOpenCv: NgxOpenCVService, private limitsService: LimitsService, private bottomSheet: MatBottomSheet) {\n    this.screenDimensions = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    // subscribe to status of cv module\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCVState) => {\n      this.cvState = cvState.state;\n      this.ready.emit(cvState.ready);\n      if (cvState.error) {\n        this.error.emit(new Error('error loading cv'));\n      } else if (cvState.loading) {\n        this.processing.emit(true);\n      } else if (cvState.ready) {\n        this.processing.emit(false);\n      }\n    });\n\n    // subscribe to positions of crop tool\n    this.limitsService.positions.subscribe(points => {\n      this.points = points;\n    });\n  }\n\n  ngOnInit() {\n    // set options from config object\n    this.options = new ImageEditorConfig(this.config);\n    // set export image icon\n    this.editorButtons.forEach(button => {\n      if (button.name === 'upload') {\n        button.icon = this.options.exportImageIcon;\n      }\n    });\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\n    this.editorStyle = this.options.editorStyle;\n  }\n\n  // ***************************** //\n  // editor action buttons methods //\n  // ***************************** //\n\n  /**\n   * emits the exitEditor event\n   */\n  exit() {\n    this.exitEditor.emit('canceled');\n  }\n\n  /**\n   * applies the selected filter, and when done emits the resulted image\n   */\n  private async exportImage() {\n    await this.applyFilter(false);\n    if (this.options.maxImageDimensions) {\n      this.resize(this.editedImage)\n        .then(resizeResult => {\n          resizeResult.toBlob((blob) => {\n            this.editResult.emit(blob);\n            this.processing.emit(false);\n          }, this.originalImage.type);\n        });\n    } else {\n      this.editedImage.toBlob((blob) => {\n        this.editResult.emit(blob);\n        this.processing.emit(false);\n      }, this.originalImage.type);\n    }\n  }\n\n  /**\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\n   */\n  private chooseFilters() {\n    const data = { filter: this.selectedFilter };\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\n      data: data\n    });\n    bottomSheetRef.afterDismissed().subscribe(() => {\n      this.selectedFilter = data.filter;\n      this.applyFilter(true);\n    });\n\n  }\n\n  // *************************** //\n  // File Input & Output Methods //\n  // *************************** //\n  /**\n   * load image from input field\n   */\n  private loadFile(file: File) {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      try {\n        await this.readImage(file);\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      try {\n        await this.showPreview();\n      } catch (err) {\n        console.error(err);\n        this.error.emit(new Error(err));\n      }\n      // set pane limits\n      // show points\n      this.imageLoaded = true;\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n      setTimeout(async () => {\n        await this.detectContours();\n        this.processing.emit(false);\n        resolve();\n      }, 15);\n    });\n  }\n\n  /**\n   * read image from File object\n   */\n  private readImage(file: File) {\n    return new Promise(async (resolve, reject) => {\n      let imageSrc;\n      try {\n        imageSrc = await readFile();\n      } catch (err) {\n        reject(err);\n      }\n      const img = new Image();\n      img.onload = async () => {\n        // set edited image canvas and dimensions\n        this.editedImage = <HTMLCanvasElement> document.createElement('canvas');\n        this.editedImage.width = img.width;\n        this.editedImage.height = img.height;\n        const ctx = this.editedImage.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        // resize image if larger than max image size\n        const width = img.width > img.height ? img.height : img.width;\n        if (width > this.options.maxImageDimensions.width) {\n          this.editedImage = await this.resize(this.editedImage);\n        }\n        this.imageDimensions.width = this.editedImage.width;\n        this.imageDimensions.height = this.editedImage.height;\n        this.setPreviewPaneDimensions(this.editedImage);\n        resolve();\n      };\n      img.src = imageSrc;\n    });\n\n    /**\n     * read file from input field\n     */\n    function readFile() {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          resolve(reader.result);\n        };\n        reader.onerror = (err) => {\n          reject(err);\n        };\n        reader.readAsDataURL(file);\n      });\n    }\n  }\n\n  // ************************ //\n  // Image Processing Methods //\n  // ************************ //\n  /**\n   * rotate image 90 degrees\n   */\n  private rotateImage() {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const dst = cv.imread(this.editedImage);\n        // const dst = new cv.Mat();\n        cv.transpose(dst, dst);\n        cv.flip(dst, dst, 1);\n        cv.imshow(this.editedImage, dst);\n        // src.delete();\n        dst.delete();\n        // save current preview dimensions and positions\n        const initialPreviewDimensions = {width: 0, height: 0};\n        Object.assign(initialPreviewDimensions, this.previewDimensions);\n        const initialPositions = Array.from(this.points);\n        // get new dimensions\n        // set new preview pane dimensions\n        this.setPreviewPaneDimensions(this.editedImage);\n        // get preview pane resize ratio\n        const previewResizeRatios = {\n          width: this.previewDimensions.width / initialPreviewDimensions.width,\n          height: this.previewDimensions.height / initialPreviewDimensions.height\n        };\n        // set new preview pane dimensions\n\n        this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\n        this.showPreview().then(() => {\n          this.processing.emit(false);\n          resolve();\n        });\n      }, 30);\n    });\n\n\n  }\n\n  /**\n   * detects the contours of the document and\n   **/\n  private detectContours(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        // load the image and compute the ratio of the old height to the new height, clone it, and resize it\n        const processingResizeRatio = 0.5;\n        const dst = cv.imread(this.editedImage);\n        const dsize = new cv.Size(dst.rows * processingResizeRatio, dst.cols * processingResizeRatio);\n        const ksize = new cv.Size(5, 5);\n        // convert the image to grayscale, blur it, and find edges in the image\n        cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n        cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n        cv.Canny(dst, dst, 75, 200);\n        // find contours\n        cv.threshold(dst, dst, 120, 200, cv.THRESH_BINARY);\n        const contours = new cv.MatVector();\n        const hierarchy = new cv.Mat();\n        cv.findContours(dst, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\n        const rect = cv.boundingRect(dst);\n        dst.delete(); hierarchy.delete(); contours.delete();\n        // transform the rectangle into a set of points\n        Object.keys(rect).forEach(key => {\n          rect[key] = rect[key]  * this.imageResizeRatio;\n        });\n\n        const contourCoordinates = [\n          new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\n          new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\n          new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\n        ];\n\n        this.limitsService.repositionPoints(contourCoordinates);\n        // this.processing.emit(false);\n        resolve();\n      }, 30);\n    });\n  }\n\n  /**\n   * apply perspective transform\n   */\n  private transform(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const dst = cv.imread(this.editedImage);\n\n        // create source coordinates matrix\n        const sourceCoordinates = [\n          this.getPoint(['top', 'left']),\n          this.getPoint(['top', 'right']),\n          this.getPoint(['bottom', 'right']),\n          this.getPoint(['bottom', 'left'])\n        ].map(point => {\n          return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\n        });\n\n        // get max width\n        const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\n        const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\n        const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\n        // get max height\n        const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\n        const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\n        const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\n        // create dest coordinates matrix\n        const destCoordinates = [\n          [0, 0],\n          [maxWidth - 1, 0],\n          [maxWidth - 1, maxHeight - 1],\n          [0, maxHeight - 1]\n        ];\n\n        // convert to open cv matrix objects\n        const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\n        const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\n        const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\n        // set new image size\n        const dsize = new cv.Size(maxWidth, maxHeight);\n        // perform warp\n        cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\n        cv.imshow(this.editedImage, dst);\n\n        dst.delete(); Ms.delete(); Md.delete(); transformMatrix.delete();\n\n        this.setPreviewPaneDimensions(this.editedImage);\n        this.showPreview().then(() => {\n          this.processing.emit(false);\n          resolve();\n        });\n      }, 30);\n    });\n  }\n\n  /**\n   * applies the selected filter to the image\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\n   * when false, will apply to editedImage\n   */\n  private applyFilter(preview: boolean): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      this.processing.emit(true);\n      // default options\n      const options = {\n        blur: false,\n        th: true,\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\n        thMeanCorrection: 10,\n        thBlockSize: 25,\n        thMax: 255,\n        grayScale: true,\n      };\n      const dst = cv.imread(this.editedImage);\n\n      switch (this.selectedFilter) {\n        case 'original':\n          options.th = false;\n          options.grayScale = false;\n          options.blur = false;\n          break;\n        case 'magic_color':\n          options.grayScale = false;\n          break;\n        case 'bw2':\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\n          options.thMeanCorrection = 15;\n          options.thBlockSize = 15;\n          break;\n        case 'bw3':\n          options.blur = true;\n          options.thMeanCorrection = 15;\n          break;\n      }\n\n      setTimeout(async () => {\n        if (options.grayScale) {\n          cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\n        }\n        if (options.blur) {\n          const ksize = new cv.Size(5, 5);\n          cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\n        }\n        if (options.th) {\n          if (options.grayScale) {\n            cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\n          } else {\n            dst.convertTo(dst, -1, 1, 60);\n            cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\n          }\n        }\n        if (!preview) {\n          cv.imshow(this.editedImage, dst);\n        }\n        await this.showPreview(dst);\n        this.processing.emit(false);\n        resolve();\n      }, 30);\n    });\n  }\n\n  /**\n   * resize an image to fit constraints set in options.maxImageDimensions\n   */\n  private resize(image: HTMLCanvasElement): Promise<HTMLCanvasElement> {\n    return new Promise((resolve, reject) => {\n      this.processing.emit(true);\n      setTimeout(() => {\n        const src = cv.imread(image);\n        const currentDimensions = {\n          width: src.size().width,\n          height: src.size().height\n        };\n        const resizeDimensions = {\n          width: 0,\n          height: 0\n        };\n        if (currentDimensions.width > this.options.maxImageDimensions.width) {\n          resizeDimensions.width = this.options.maxImageDimensions.width;\n          resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\n          if (resizeDimensions.height > this.options.maxImageDimensions.height) {\n            resizeDimensions.height = this.options.maxImageDimensions.height;\n            resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\n          }\n          const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\n          cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\n          const resizeResult = <HTMLCanvasElement> document.createElement('canvas');\n          cv.imshow(resizeResult, src);\n          src.delete();\n          this.processing.emit(false);\n          resolve(resizeResult);\n        } else {\n          this.processing.emit(false);\n          resolve(image);\n        }\n      }, 30);\n    });\n  }\n\n  /**\n   * display a preview of the image on the preview canvas\n   */\n  private showPreview(image?: any) {\n    return new Promise((resolve, reject) => {\n      let src;\n      if (image) {\n        src = image;\n      } else {\n        src = cv.imread(this.editedImage);\n      }\n      const dst = new cv.Mat();\n      const dsize = new cv.Size(0, 0);\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\n      cv.imshow(this.previewCanvas.nativeElement, dst);\n      src.delete();\n      dst.delete();\n      resolve();\n    });\n  }\n\n  // *************** //\n  // Utility Methods //\n  // *************** //\n  /**\n   * set preview canvas dimensions according to the canvas element of the original image\n   */\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\n    // set preview pane dimensions\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\n    this.imageDivStyle = {\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\n      'margin-left': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`,\n      'margin-right': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`,\n    };\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\n  }\n\n  /**\n   * calculate dimensions of the preview canvas\n   */\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number} {\n    const ratio = width / height;\n\n    const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\n      this.maxPreviewWidth : this.screenDimensions.width - 40;\n    const maxHeight = this.screenDimensions.height - 240;\n    const calculated = {\n      width: maxWidth,\n      height: Math.round(maxWidth / ratio),\n      ratio: ratio\n    };\n\n    if (calculated.height > maxHeight) {\n      calculated.height = maxHeight;\n      calculated.width = Math.round(maxHeight * ratio);\n    }\n    return calculated;\n  }\n\n  /**\n   * returns a point by it's roles\n   * @param roles - an array of roles by which the point will be fetched\n   */\n  private getPoint(roles: RolesArray) {\n    return this.points.find(point => {\n      return this.limitsService.compareArray(point.roles, roles);\n    });\n  }\n}\n\n/**\n * a class for generating configuration objects for the editor\n */\nclass ImageEditorConfig implements DocScannerConfig {\n  /**\n   * max dimensions of oputput image. if set to zero\n   */\n  maxImageDimensions: ImageDimensions = {\n    width: 800,\n    height: 1200\n  };\n  /**\n   * background color of the main editor div\n   */\n  editorBackgroundColor = '#fefefe';\n  /**\n   * css properties for the main editor div\n   */\n  editorDimensions: { width: string; height: string; } = {\n    width: '100vw',\n    height: '100vh'\n  };\n  /**\n   * css that will be added to the main div of the editor component\n   */\n  extraCss: {[key: string]: string|number} = {\n    position: 'absolute',\n    top: 0,\n    left: 0\n  };\n\n  /**\n   * material design theme color name\n   */\n  buttonThemeColor: 'primary'|'warn'|'accent' = 'accent';\n  /**\n   * icon for the button that completes the editing and emits the edited image\n   */\n  exportImageIcon = 'cloud_upload';\n  /**\n   * color of the crop tool\n   */\n  cropToolColor = '#3cabe2';\n  /**\n   * shape of the crop tool, can be either a rectangle or a circle\n   */\n  cropToolShape: PointShape = 'rect';\n  /**\n   * dimensions of the crop tool\n   */\n  cropToolDimensions: ImageDimensions = {\n    width: 10,\n    height: 10\n  };\n  /**\n   * aggregation of the properties regarding point attributes generated by the class constructor\n   */\n  pointOptions: PointOptions;\n  /**\n   * aggregation of the properties regarding the editor style generated by the class constructor\n   */\n  editorStyle?: {[key: string]: string|number};\n  /**\n   * crop tool outline width\n   */\n  cropToolLineWeight = 3;\n  /**\n   * maximum size of the preview pane\n   */\n  maxPreviewWidth = 800;\n\n  constructor(options: DocScannerConfig) {\n    if (options) {\n      Object.keys(options).forEach(key => {\n        this[key] = options[key];\n      });\n    }\n\n    this.editorStyle = {'background-color': this.editorBackgroundColor };\n    Object.assign(this.editorStyle, this.editorDimensions);\n    Object.assign(this.editorStyle, this.extraCss);\n\n    this.pointOptions = {\n      shape: this.cropToolShape,\n      color: this.cropToolColor,\n      width: 0,\n      height: 0\n    };\n    Object.assign(this.pointOptions, this.cropToolDimensions);\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\nimport {LimitsService} from './services/limits.service';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {AngularDraggableModule} from 'angular2-draggable';\nimport {CommonModule} from '@angular/common';\nimport {OpenCVConfig} from './PublicModels';\nimport {NgxOpenCVModule} from 'ngx-opencv';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatListModule } from '@angular/material/list';\nimport {NgxOpenCVService, OpenCvConfigToken} from 'ngx-opencv';\n\n@NgModule({\n  declarations: [\n    NgxDraggablePointComponent,\n    NgxFilterMenuComponent,\n    NgxShapeOutlineComponent,\n    NgxDocScannerComponent,\n  ],\n  imports: [\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatBottomSheetModule,\n    MatListModule,\n    AngularDraggableModule,\n    CommonModule,\n    NgxOpenCVModule,\n  ],\n  exports: [\n    FlexLayoutModule,\n    MatButtonModule,\n    MatIconModule,\n    MatBottomSheetModule,\n    MatListModule,\n    AngularDraggableModule,\n    NgxDocScannerComponent,\n  ],\n  entryComponents: [\n    NgxFilterMenuComponent,\n  ],\n  providers: [\n    NgxOpenCVService,\n    LimitsService,\n  ]\n})\nexport class NgxDocumentScannerModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxDocumentScannerModule,\n      providers: [\n        { provide: OpenCvConfigToken, useValue: config },\n      ],\n    };\n  }\n}\n","/**\n * describes a state object for the OpenCV module\n */\nimport {PointShape} from './PrivateModels';\n\nexport interface OpenCVState {\n  ready: boolean;\n  loading: boolean;\n  error: boolean;\n  state: string;\n}\n\n/**\n * describes an object with width and height properties\n */\nexport interface ImageDimensions {\n  width: number;\n  height: number;\n}\n\n/**\n * describes a configuration object for the editor\n */\nexport interface DocScannerConfig {\n  /**\n   * max dimensions of output image. if set to zero will not resize the image\n   */\n  maxImageDimensions?: ImageDimensions;\n  /**\n   * background color of the main editor div\n   */\n  editorBackgroundColor?: string;\n  /**\n   * css properties for the main editor div\n   */\n  editorDimensions?: { width: string; height: string; };\n  /**\n   * css that will be added to the main div of the editor component\n   */\n  extraCss?: { [key: string]: string | number };\n  /**\n   * material design theme color name\n   */\n  buttonThemeColor?: 'primary' | 'warn' | 'accent';\n  /**\n   * icon for the button that completes the editing and emits the edited image\n   */\n  exportImageIcon?: string;\n  /**\n   * color of the crop tool (points and connecting lines)\n   */\n  cropToolColor?: string;\n  /**\n   * shape of the crop tool points\n   */\n  cropToolShape?: PointShape;\n  /**\n   * width and height of the crop tool points\n   */\n  cropToolDimensions?: ImageDimensions;\n  /**\n   * weight of the crop tool's connecting lines\n   */\n  cropToolLineWeight?: number;\n  /**\n   * max width of the preview pane\n   */\n  maxPreviewWidth?: number;\n}\n\n/**\n * describes a configuration object for the OpenCV service\n */\nexport interface OpenCVConfig {\n  /**\n   * path to the directory containing the OpenCV files, in the form of '/path/to/<opencv directory>'\n   * directory must contain the the following files:\n   * --<OpenCvDir>\n   * ----opencv.js\n   * ----opencv_js.wasm\n   */\n  openCVDirPath?: string;\n  /**\n   * additional callback that will run when OpenCv has finished loading and parsing\n   */\n  runOnOpenCVInit?: Function;\n}\n"]}