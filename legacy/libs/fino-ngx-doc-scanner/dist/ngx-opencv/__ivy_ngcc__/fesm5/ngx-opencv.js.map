{"version":3,"file":"ngx-opencv.js","sources":["ng:/ngx-opencv/lib/ngx-open-cv.service.ts","ng:/ngx-opencv/lib/ngx-opencv.module.ts","ng:/ngx-opencv/lib/models.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {OpenCVConfig, OpenCVState} from './models';\n\nexport const OpenCvConfigToken = new InjectionToken<OpenCVConfig>('OpenCV config object token');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxOpenCVService {\n\n  cvState = new BehaviorSubject<OpenCVState>({\n    ready: false,\n    error: false,\n    loading: true,\n    state: 'loading'\n  });\n  configModule: OpenCvConfigModule;\n\n  constructor(@Inject(OpenCvConfigToken) options: OpenCVConfig, private _ngZone: NgZone) {\n    if (!options) {\n      options = {};\n    }\n    this.configModule = this.generateConfigModule(options);\n    this.loadOpenCv();\n  }\n\n  /**\n   * load the OpenCV script\n   */\n  loadOpenCv() {\n    this.cvState.next( this.newState('loading'));\n    // create global module variable\n    window['Module'] = this.configModule;\n\n    // create script element and set attributes\n    const script = <HTMLScriptElement> document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n\n    // listen for errors\n    script.addEventListener('error', () => {\n      const err = new Error('Failed to load ' + this.configModule.scriptUrl);\n      this.cvState.next(this.newState('error'));\n      this.cvState.error(err);\n    }, {passive: true});\n\n    // set script url\n    script.src = this.configModule.scriptUrl;\n    // insert script as first script tag\n    const node = document.getElementsByTagName('script')[0];\n    if (node) {\n      node.parentNode.insertBefore(script, node);\n    } else {\n      document.head.appendChild(script);\n    }\n  }\n\n  /**\n   * generates a new state object\n   * @param change - the new state of the module\n   */\n  private newState(change: 'loading'|'ready'|'error'): OpenCVState {\n    const newStateObj: OpenCVState = {\n      ready: false,\n      loading: false,\n      error: false,\n      state: ''\n    };\n    Object.keys(newStateObj).forEach(key => {\n      if (key !== 'state') {\n        if (key === change) {\n          newStateObj[key] = true;\n          newStateObj.state = key;\n        } else {\n          newStateObj[key] = false;\n        }\n      }\n    });\n    return newStateObj;\n  }\n\n  /**\n   * generates a config module for the global Module object\n   * @param options - configuration options\n   */\n  private generateConfigModule(options: OpenCVConfig): OpenCvConfigModule {\n    return {\n      scriptUrl: options.openCVDirPath ? `${options.openCVDirPath}/opencv.js` : `/assets/opencv/opencv.js`,\n      wasmBinaryFile: 'opencv_js.wasm',\n      usingWasm: true,\n      onRuntimeInitialized: () => {\n        this._ngZone.run(() => {\n          console.log('openCV Ready');\n          this.cvState.next(this.newState('ready'));\n          if (options.runOnOpenCVInit) {\n            options.runOnOpenCVInit();\n          }\n        });\n      }\n    };\n  }\n}\n\n/**\n * describes the global Module object that is used to initiate OpenCV.js\n */\ninterface OpenCvConfigModule {\n  scriptUrl: string;\n  wasmBinaryFile: string;\n  usingWasm: boolean;\n  onRuntimeInitialized: Function;\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {OpenCVConfig} from './models';\nimport {NgxOpenCVService, OpenCvConfigToken} from './ngx-open-cv.service';\n\n\n@NgModule({\n  declarations: [],\n  exports: [],\n  providers: [NgxOpenCVService]\n})\nexport class NgxOpenCVModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxOpenCVModule,\n      providers: [{ provide: OpenCvConfigToken, useValue: config }]\n    };\n  }\n}\n\nconst a = 0;\n","/**\n * describes a configuration object for the OpenCV service\n */\nexport interface OpenCVConfig {\n  /**\n   * path to the directory containing the OpenCV files, in the form of '/path/to/<opencv directory>'\n   * directory must contain the the following files:\n   * --<OpenCvDir>\n   * ----opencv.js\n   * ----opencv_js.wasm\n   */\n  openCVDirPath?: string;\n  /**\n   * additional callback that will run when OpenCv has finished loading and parsing\n   */\n  runOnOpenCVInit?: Function;\n}\n\nexport interface OpenCVState {\n  ready: boolean;\n  loading: boolean;\n  error: boolean;\n  state: string;\n}\n"]}