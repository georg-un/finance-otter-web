{"version":3,"sources":["ng://ngx-opencv/lib/ngx-open-cv.service.ts","ng://ngx-opencv/lib/ngx-opencv.module.ts"],"names":["OpenCvConfigToken","InjectionToken","NgxOpenCVService","options","_ngZone","this","cvState","BehaviorSubject","ready","error","loading","state","configModule","generateConfigModule","loadOpenCv","prototype","_this","next","newState","window","script","document","createElement","setAttribute","addEventListener","err","Error","scriptUrl","passive","src","node","getElementsByTagName","parentNode","insertBefore","head","appendChild","change","newStateObj","Object","keys","forEach","key","openCVDirPath","wasmBinaryFile","usingWasm","onRuntimeInitialized","run","console","log","runOnOpenCVInit","Injectable","args","providedIn","Inject","NgZone","NgxOpenCVModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"iTAIaA,EAAoB,IAAIC,EAAAA,eAA6B,2CAehE,SAAAC,EAAuCC,EAA+BC,GAAAC,KAAAD,QAAAA,EARtEC,KAAAC,QAAU,IAAIC,EAAAA,gBAA6B,CACzCC,OAAO,EACPC,OAAO,EACPC,SAAS,EACTC,MAAO,YAKFR,IACHA,EAAU,IAEZE,KAAKO,aAAeP,KAAKQ,qBAAqBV,GAC9CE,KAAKS,oBAMPZ,EAAAa,UAAAD,WAAA,WAAA,IAAAE,EAAAX,KACEA,KAAKC,QAAQW,KAAMZ,KAAKa,SAAS,YAEjCC,OAAe,OAAId,KAAKO,iBAGlBQ,EAA6BC,SAASC,cAAc,UAC1DF,EAAOG,aAAa,QAAS,IAC7BH,EAAOG,aAAa,OAAQ,mBAG5BH,EAAOI,iBAAiB,SAAO,eACvBC,EAAM,IAAIC,MAAM,kBAAoBV,EAAKJ,aAAae,WAC5DX,EAAKV,QAAQW,KAAKD,EAAKE,SAAS,UAChCF,EAAKV,QAAQG,MAAMgB,KAClB,CAACG,SAAS,IAGbR,EAAOS,IAAMxB,KAAKO,aAAae,cAEzBG,EAAOT,SAASU,qBAAqB,UAAU,GACjDD,EACFA,EAAKE,WAAWC,aAAab,EAAQU,GAErCT,SAASa,KAAKC,YAAYf,IAQtBlB,EAAAa,UAAAG,SAAR,SAAiBkB,OACTC,EAA2B,CAC/B7B,OAAO,EACPE,SAAS,EACTD,OAAO,EACPE,MAAO,IAYT,OAVA2B,OAAOC,KAAKF,GAAaG,SAAO,SAACC,GACnB,UAARA,IACEA,IAAQL,GACVC,EAAYI,IAAO,EACnBJ,EAAY1B,MAAQ8B,GAEpBJ,EAAYI,IAAO,MAIlBJ,GAODnC,EAAAa,UAAAF,qBAAR,SAA6BV,GAA7B,IAAAa,EAAAX,KACE,MAAO,CACLsB,UAAWxB,EAAQuC,cAAmBvC,EAAQuC,cAAa,aAAe,2BAC1EC,eAAgB,iBAChBC,WAAW,EACXC,qBAAoB,WAClB7B,EAAKZ,QAAQ0C,KAAG,WACdC,QAAQC,IAAI,gBACZhC,EAAKV,QAAQW,KAAKD,EAAKE,SAAS,UAC5Bf,EAAQ8C,iBACV9C,EAAQ8C,4CA1FnBC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,6EAYCC,EAAAA,OAAMF,KAAA,CAACnD,YAnBsBsD,EAAAA,+JCK5C,SAAAC,KAYA,OANSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CAAC,CAAEC,QAAS5D,EAAmB6D,SAAUJ,0BATzDK,EAAAA,SAAQX,KAAA,CAAC,CACRY,aAAc,GACdC,QAAS,GACTL,UAAW,CAACzD,OASdqD","sourcesContent":["import {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {OpenCVConfig, OpenCVState} from './models';\n\nexport const OpenCvConfigToken = new InjectionToken<OpenCVConfig>('OpenCV config object token');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxOpenCVService {\n\n  cvState = new BehaviorSubject<OpenCVState>({\n    ready: false,\n    error: false,\n    loading: true,\n    state: 'loading'\n  });\n  configModule: OpenCvConfigModule;\n\n  constructor(@Inject(OpenCvConfigToken) options: OpenCVConfig, private _ngZone: NgZone) {\n    if (!options) {\n      options = {};\n    }\n    this.configModule = this.generateConfigModule(options);\n    this.loadOpenCv();\n  }\n\n  /**\n   * load the OpenCV script\n   */\n  loadOpenCv() {\n    this.cvState.next( this.newState('loading'));\n    // create global module variable\n    window['Module'] = this.configModule;\n\n    // create script element and set attributes\n    const script = <HTMLScriptElement> document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n\n    // listen for errors\n    script.addEventListener('error', () => {\n      const err = new Error('Failed to load ' + this.configModule.scriptUrl);\n      this.cvState.next(this.newState('error'));\n      this.cvState.error(err);\n    }, {passive: true});\n\n    // set script url\n    script.src = this.configModule.scriptUrl;\n    // insert script as first script tag\n    const node = document.getElementsByTagName('script')[0];\n    if (node) {\n      node.parentNode.insertBefore(script, node);\n    } else {\n      document.head.appendChild(script);\n    }\n  }\n\n  /**\n   * generates a new state object\n   * @param change - the new state of the module\n   */\n  private newState(change: 'loading'|'ready'|'error'): OpenCVState {\n    const newStateObj: OpenCVState = {\n      ready: false,\n      loading: false,\n      error: false,\n      state: ''\n    };\n    Object.keys(newStateObj).forEach(key => {\n      if (key !== 'state') {\n        if (key === change) {\n          newStateObj[key] = true;\n          newStateObj.state = key;\n        } else {\n          newStateObj[key] = false;\n        }\n      }\n    });\n    return newStateObj;\n  }\n\n  /**\n   * generates a config module for the global Module object\n   * @param options - configuration options\n   */\n  private generateConfigModule(options: OpenCVConfig): OpenCvConfigModule {\n    return {\n      scriptUrl: options.openCVDirPath ? `${options.openCVDirPath}/opencv.js` : `/assets/opencv/opencv.js`,\n      wasmBinaryFile: 'opencv_js.wasm',\n      usingWasm: true,\n      onRuntimeInitialized: () => {\n        this._ngZone.run(() => {\n          console.log('openCV Ready');\n          this.cvState.next(this.newState('ready'));\n          if (options.runOnOpenCVInit) {\n            options.runOnOpenCVInit();\n          }\n        });\n      }\n    };\n  }\n}\n\n/**\n * describes the global Module object that is used to initiate OpenCV.js\n */\ninterface OpenCvConfigModule {\n  scriptUrl: string;\n  wasmBinaryFile: string;\n  usingWasm: boolean;\n  onRuntimeInitialized: Function;\n}\n\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {OpenCVConfig} from './models';\nimport {NgxOpenCVService, OpenCvConfigToken} from './ngx-open-cv.service';\n\n\n@NgModule({\n  declarations: [],\n  exports: [],\n  providers: [NgxOpenCVService]\n})\nexport class NgxOpenCVModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxOpenCVModule,\n      providers: [{ provide: OpenCvConfigToken, useValue: config }]\n    };\n  }\n}\n\nconst a = 0;\n"]}